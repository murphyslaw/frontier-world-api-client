/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/abis/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get ABI with some config
         * @description retrieve the world contracts ABIs with some config
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["routes.ABIConfig"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get config
         * @description retrieve all the config needed to connect to our services
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ChainConfig"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * health endpoint
         * @description Tells you if the World API is ok
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["routes.heatlhy"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metatransaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * submit a meta transaction
         * @description submit a meta transaction
         *     Only bringOnline, bringOffline and setEntityMetadata are allowed
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description ERC2771 Meta TX object */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["v1.ERC2771"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/fuels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** available fuels for the smart assemblies */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description fuels with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.fuelResponse"][];
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/killmails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get all reported killmails
         * @description Retrieve all killmails that have been saved to the chain
         *     Endpoint is paginated, use the `limit`/`offset` query param to paginate
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of killmail to return */
                    limit?: number;
                    /** @description Number of killmail to skip before starting to collect the results */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description killmail response with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.killMailResponse"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/killmails/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get a single killmail
         * @description returns a single killmail by the given id
         */
        get: {
            parameters: {
                query?: {
                    /** @description Format of the response (default to json) */
                    format?: "json" | "pod";
                };
                header?: never;
                path: {
                    /** @description Killmail ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description the detailed killmail */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.killMailResponse"];
                    };
                };
                /** @description when generating a POD (with ?format=pod) */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["pod.Pod"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pod/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * verify a POD
         * @description verify a Provable Object Datatype object
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description POD to verify */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["pod.Pod"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.verifyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartassemblies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get all the smart assemblies
         * @description list all the smart assemblies currently in the world
         *     Endpoint is paginated, use the `limit`/`offset` query param to paginate
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of smart assemblies to return */
                    limit?: number;
                    /** @description Number of smart assemblies to skip before starting to collect the results */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description smart assemblies with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.smartAssemblyResponse"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartassemblies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get a single smart assembly
         * @description Retrieve one Smart Assembly with the given id
         *     if the assembly is a gate then the `.gate{}` will be filled
         *     if the assembly is a storage unit then the `.storage{}` object will be filled
         */
        get: {
            parameters: {
                query?: {
                    /** @description Format of the response (default to json) */
                    format?: "json" | "pod";
                };
                header?: never;
                path: {
                    /** @description Smart Assembly ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description default response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.detailedSmartAssemblyResponse"];
                    };
                };
                /** @description when generating a POD (with ?format=pod) */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["pod.Pod"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartcharacters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get all the smart characters
         * @description list all the smart characters currently in the world
         *     Endpoint is paginated, use the `limit`/`offset` query param to paginate
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of smart characters to return */
                    limit?: number;
                    /** @description Number of smart characters to skip before starting to collect the results */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description smart characters with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.smartCharacterResponse"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartcharacters/me/jumps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * list all the jumps for the current user
         * @description returns all the gate jumps that the current authenticated user made
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description jumps with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.jumpResponse"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartcharacters/me/jumps/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get a single jump
         * @description returns a single jump by the given id that the current authenticated user made
         */
        get: {
            parameters: {
                query?: {
                    /** @description Format of the response (default to json) */
                    format?: "json" | "pod";
                };
                header?: never;
                path: {
                    /** @description Jump ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description the detailed jump */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.jumpResponse"];
                    };
                };
                /** @description when generating a POD (with ?format=pod) */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["pod.Pod"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartcharacters/me/scans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * list all the scans for the current user
         * @description Returns all the scans that the current authenticated user saved
         *     Mocked data for now
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description scans with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.scanResponse"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartcharacters/me/scans/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get a single scan
         * @description Returns a single scan by the given id that the current authenticated user saved
         *     Mocked data for now
         */
        get: {
            parameters: {
                query?: {
                    /** @description Format of the response (default to json) */
                    format?: "json" | "pod";
                };
                header?: never;
                path: {
                    /** @description Scan ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description the detailed scan */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.scanResponse"];
                    };
                };
                /** @description when generating a POD (with ?format=pod) */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["pod.Pod"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/smartcharacters/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get a single smart character
         * @description retrieve one smart character with the given address
         */
        get: {
            parameters: {
                query?: {
                    /** @description Format of the response (default to json) */
                    format?: "json" | "pod";
                };
                header?: never;
                path: {
                    /** @description character hex address */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.detailedSmartCharacterResponse"];
                    };
                };
                /** @description when generating a POD (with ?format=pod) */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["pod.Pod"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/solarsystems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get all the solar systems
         * @description list all the solar systems currently in the game
         *     Endpoint is paginated, use the `limit`/`offset` query param to paginate
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of solar systems to return */
                    limit?: number;
                    /** @description Number of solar systems to skip before starting to collect the results */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description solar systems with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.solarSystemResponse"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/solarsystems/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get one solar system
         * @description get details about a single solar system
         */
        get: {
            parameters: {
                query?: {
                    /** @description Format of the response (default to json) */
                    format?: "json" | "pod";
                };
                header?: never;
                path: {
                    /** @description Solar System ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.detailedSolarSystemResponse"];
                    };
                };
                /** @description when generating a POD (with ?format=pod) */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["pod.Pod"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get all the game types
         * @description list all the game types
         *     Endpoint is paginated, use the `limit`/`offset` query param to paginate
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of types to return */
                    limit?: number;
                    /** @description Number of types to skip before starting to collect the results */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description game types with some metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.paginatedResponse"] & {
                            data?: components["schemas"]["v2.typeResponse"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get game type
         * @description get details about a single game type
         */
        get: {
            parameters: {
                query?: {
                    /** @description Format of the response (default to json) */
                    format?: "json" | "pod";
                };
                header?: never;
                path: {
                    /** @description game type ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v2.typeResponse"];
                    };
                };
                /** @description when generating a POD (with ?format=pod) */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["pod.Pod"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "big.Int": Record<string, never>;
        "models.AddressConfig": {
            address?: string;
        };
        "models.ChainConfig": {
            EVEToLuxExchangeRate?: number;
            baseDappUrl?: string;
            blockExplorerUrl?: string;
            chainId?: number;
            contracts?: components["schemas"]["models.Contracts"];
            exchangeWalletAddress?: string;
            indexerUrl?: string;
            ipfsApiUrl?: string;
            itemTypeIDs?: components["schemas"]["models.ItemTypeIDs"];
            metadataApiUrl?: string;
            name?: string;
            nativeCurrency?: components["schemas"]["models.NativeCurrency"];
            podPublicSigningKey?: string;
            rpcUrls?: components["schemas"]["models.RPCs"];
            systems?: components["schemas"]["models.SystemIds"];
            vaultDappUrl?: string;
            walletApiUrl?: string;
        };
        "models.Contracts": {
            contractsVersion?: string;
            eveToken?: components["schemas"]["models.AddressConfig"];
            forwarder?: components["schemas"]["models.AddressConfig"];
            lensSeller?: components["schemas"]["models.AddressConfig"];
            world?: components["schemas"]["models.AddressConfig"];
        };
        "models.ItemTypeIDs": {
            fuel?: number;
        };
        "models.NativeCurrency": {
            decimals?: number;
            name?: string;
            symbol?: string;
        };
        "models.RPCURls": {
            http?: string;
            webSocket?: string;
        };
        "models.RPCs": {
            default?: components["schemas"]["models.RPCURls"];
            public?: components["schemas"]["models.RPCURls"];
        };
        "models.SystemIds": {
            approveEVE?: string;
            bringOffline?: string;
            bringOnline?: string;
            createAndAnchorSmartGate?: string;
            createAndAnchorSmartStorageUnit?: string;
            createAndAnchorSmartTurret?: string;
            createAndDepositItemsToEphemeralInventory?: string;
            createAndDepositItemsToInventory?: string;
            createCharacter?: string;
            depositFuel?: string;
            depositToSSU?: string;
            destroyDeployable?: string;
            purchaseItem?: string;
            reportKill?: string;
            transfer?: string;
            unanchor?: string;
            updateFuel?: string;
            withdrawFromEphemeralInventory?: string;
            withdrawFromInventory?: string;
            withdrawFuel?: string;
        };
        "pod.Pod": {
            entries?: components["schemas"]["pod.PodEntries"];
            signature?: string;
            signerPublicKey?: string;
        };
        "pod.PodEntries": {
            [key: string]: components["schemas"]["pod.PodValue"];
        };
        "pod.PodValue": {
            bigVal?: components["schemas"]["big.Int"];
            boolVal?: boolean;
            bytesVal?: number[];
            stringVal?: string;
            timeVal?: string;
            valueType?: components["schemas"]["pod.PodValueType"];
        };
        /** @enum {string} */
        "pod.PodValueType": "null" | "string" | "bytes" | "cryptographic" | "int" | "boolean" | "eddsa_pubkey" | "date" | "array" | "map";
        "routes.ABIConfig": {
            EVE_to_LUX_exchange_rate?: number;
            base_dapp_url?: string;
            cfg?: components["schemas"]["routes.AbiCfg"][];
            exchange_wallet_address?: string;
            system_ids?: components["schemas"]["models.SystemIds"];
            systems?: number[];
            vault_dapp_url?: string;
        };
        "routes.AbiCfg": {
            abi?: number[];
            chain_id?: number;
            deployed_to?: string;
            eip712?: components["schemas"]["routes.EIP712"];
            name?: string;
            urls?: components["schemas"]["routes.URLs"];
        };
        "routes.EIP712": {
            name?: string;
            version?: string;
        };
        "routes.URLs": {
            private?: string[];
            public?: string[];
        };
        "routes.heatlhy": {
            ok?: boolean;
        };
        "v1.ERC2771": {
            data?: string;
            deadline?: number;
            from?: string;
            gas?: number;
            nonce?: string;
            signature?: string;
            to?: string;
            value?: number;
        };
        "v2.burnResponse": {
            isBurning?: boolean;
            previousCycleElapsedTimeInSec?: number;
            startTime?: string;
        };
        "v2.detailedSmartAssemblyResponse": {
            dappURL?: string;
            description?: string;
            energyUsage?: number;
            gate?: components["schemas"]["v2.gateResponse"];
            id?: string;
            location?: components["schemas"]["v2.gameLocationResponse"];
            manufacturing?: components["schemas"]["v2.manufacturingResponse"];
            name?: string;
            networkNode?: components["schemas"]["v2.networkNodeResponse"];
            owner?: components["schemas"]["v2.smartCharacterResponse"];
            refinery?: components["schemas"]["v2.refineryResponse"];
            solarSystem?: components["schemas"]["v2.solarSystemResponse"];
            state?: components["schemas"]["v2.smartAssemblyStateEnum"];
            storage?: components["schemas"]["v2.storageResponse"];
            turret?: components["schemas"]["v2.turretResponse"];
            type?: components["schemas"]["v2.smartAssemblyTypeEnum"];
            typeDetails?: components["schemas"]["v2.typeResponse"];
            typeId?: number;
        };
        "v2.detailedSmartCharacterResponse": {
            address?: string;
            eveBalanceInWei?: string;
            gasBalanceInWei?: string;
            id?: string;
            name?: string;
            portraitUrl?: string;
            smartAssemblies?: components["schemas"]["v2.smartAssemblyResponse"][];
            tribeId?: number;
        };
        "v2.detailedSolarSystemResponse": {
            id?: number;
            location?: components["schemas"]["v2.gameLocationResponse"];
            name?: string;
            regionId?: number;
            smartAssemblies?: components["schemas"]["v2.smartAssemblyResponse"][];
        };
        "v2.ephemeralInventoryResponse": {
            capacity?: string;
            items?: components["schemas"]["v2.itemResponse"][];
            owner?: components["schemas"]["v2.smartCharacterResponse"];
            usedCapacity?: string;
        };
        "v2.fuelResponse": {
            efficiency?: number;
            type?: components["schemas"]["v2.typeResponse"];
        };
        "v2.gameLocationResponse": {
            x?: number;
            y?: number;
            z?: number;
        };
        "v2.gateResponse": {
            destinationId?: string;
            inRange?: components["schemas"]["v2.smartAssemblyResponse"][];
            isParentNodeOnline?: boolean;
            linked?: boolean;
        };
        "v2.inventoryResponse": {
            capacity?: string;
            items?: components["schemas"]["v2.itemResponse"][];
            usedCapacity?: string;
        };
        "v2.itemResponse": {
            image?: string;
            itemId?: number;
            name?: string;
            quantity?: number;
            typeId?: number;
        };
        "v2.jumpResponse": {
            destination?: components["schemas"]["v2.solarSystemResponse"];
            /** @description for now the Id is the jump Time as a UNIX ms timestamp */
            id?: number;
            origin?: components["schemas"]["v2.solarSystemResponse"];
            ship?: components["schemas"]["v2.jumpShipResponse"];
            time?: string;
        };
        "v2.jumpShipResponse": {
            instanceId?: number;
            typeId?: number;
        };
        "v2.killMailResponse": {
            id?: number;
            killer?: components["schemas"]["v2.smartCharacterResponse"];
            solarSystemId?: number;
            time?: string;
            victim?: components["schemas"]["v2.smartCharacterResponse"];
        };
        "v2.loadedFuelResponse": {
            amount?: number;
            burnRateInSec?: number;
            efficiency?: number;
            typeId?: number;
            unitVolume?: number;
        };
        "v2.manufacturingResponse": {
            isParentNodeOnline?: boolean;
        };
        "v2.networkNodeResponse": {
            burn?: components["schemas"]["v2.burnResponse"];
            energyMaxCapacity?: number;
            energyProduction?: number;
            fuel?: components["schemas"]["v2.loadedFuelResponse"];
            linkedAssemblies?: components["schemas"]["v2.smartAssemblyResponse"][];
            totalReservedEnergy?: number;
        };
        "v2.paginatedResponse": {
            data?: Record<string, never>;
            metadata?: components["schemas"]["v2.paginationMetadata"];
        };
        "v2.paginationMetadata": {
            limit?: number;
            offset?: number;
            total?: number;
        };
        "v2.refineryResponse": {
            isParentNodeOnline?: boolean;
        };
        "v2.scanResponse": {
            id?: number;
            location?: components["schemas"]["v2.solarSystemResponse"];
            scannedObject?: components["schemas"]["v2.scannedObjectResponse"];
            time?: string;
        };
        "v2.scannedObjectResponse": {
            mass?: number;
            name?: string;
            owner?: string;
            typeID?: number;
        };
        "v2.smartAssemblyResponse": {
            energyUsage?: number;
            id?: string;
            name?: string;
            owner?: components["schemas"]["v2.smartCharacterResponse"];
            solarSystem?: components["schemas"]["v2.solarSystemResponse"];
            state?: components["schemas"]["v2.smartAssemblyStateEnum"];
            type?: components["schemas"]["v2.smartAssemblyTypeEnum"];
            typeDetails?: components["schemas"]["v2.typeResponse"];
            typeId?: number;
        };
        /** @enum {string} */
        "v2.smartAssemblyStateEnum": "unknown" | "unanchored" | "anchored" | "online" | "offline" | "destroyed";
        /** @enum {string} */
        "v2.smartAssemblyTypeEnum": "SmartStorageUnit" | "SmartTurret" | "SmartGate" | "NetworkNode" | "Refinery" | "Manufacturing" | "SmartHangar" | "Unknown";
        "v2.smartCharacterResponse": {
            address?: string;
            id?: string;
            name?: string;
        };
        "v2.solarSystemResponse": {
            id?: number;
            location?: components["schemas"]["v2.gameLocationResponse"];
            name?: string;
        };
        "v2.storageResponse": {
            ephemeralInventories?: components["schemas"]["v2.ephemeralInventoryResponse"][];
            isParentNodeOnline?: boolean;
            mainInventory?: components["schemas"]["v2.inventoryResponse"];
        };
        "v2.turretResponse": {
            isParentNodeOnline?: boolean;
        };
        "v2.typeResponse": {
            categoryId?: number;
            categoryName?: string;
            description?: string;
            groupId?: number;
            groupName?: string;
            iconUrl?: string;
            id?: number;
            mass?: number;
            name?: string;
            portionSize?: number;
            radius?: number;
            volume?: number;
        };
        "v2.verifyResponse": {
            error?: string;
            isValid?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
